<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Now And Tomorrow</title>
  
  <subtitle>B站不再是“净土”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-19T10:41:23.582Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>方鹏程</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo几个命令</title>
    <link href="http://yoursite.com/2019/12/01/hello-world/"/>
    <id>http://yoursite.com/2019/12/01/hello-world/</id>
    <published>2019-12-01T10:45:29.000Z</published>
    <updated>2019-05-19T10:41:23.582Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class
      
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/05/25/bootstrap-0/"/>
    <id>http://yoursite.com/2019/05/25/bootstrap-0/</id>
    <published>2019-05-25T02:26:38.740Z</published>
    <updated>2015-12-12T08:06:35.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微金所项目实战"><a href="#微金所项目实战" class="headerlink" title="微金所项目实战"></a>微金所项目实战</h1><h2 id="搭建Bootstrap页面骨架及项目目录结构"><a href="#搭建Bootstrap页面骨架及项目目录结构" class="headerlink" title="搭建Bootstrap页面骨架及项目目录结构"></a>搭建Bootstrap页面骨架及项目目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├─ /weijinsuo/ ··················· 项目所在目录</span><br><span class="line">└─┬─ /css/ ······················· 我们自己的CSS文件</span><br><span class="line">  ├─ /font/ ······················ 使用到的字体文件</span><br><span class="line">  ├─ /img/ ······················· 使用到的图片文件</span><br><span class="line">  ├─ /js/ ························ 自己写的JS脚步</span><br><span class="line">  ├─ /lib/ ······················· 从第三方下载回来的库【只用不改】</span><br><span class="line">  ├─ /favicon.ico ················ 站点图标</span><br><span class="line">  └─ /index.html ················· 入口文件</span><br></pre></td></tr></table></figure><p>在我们默认的样式表中将默认字体设置为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>, Helvetica, Microsoft Yahei, Hiragino Sans GB, WenQuanYi Micro Hei, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- nth-of-type --><h3 id="HTML5文档结构"><a href="#HTML5文档结构" class="headerlink" title="HTML5文档结构"></a>HTML5文档结构</h3><h3 id="Viewport设置"><a href="#Viewport设置" class="headerlink" title="Viewport设置"></a>Viewport设置</h3><p>meta:vp</p><h3 id="浏览器兼容模式"><a href="#浏览器兼容模式" class="headerlink" title="浏览器兼容模式"></a>浏览器兼容模式</h3><p>meta:compat</p><h3 id="favicon-ico"><a href="#favicon-ico" class="headerlink" title="favicon.ico"></a>favicon.ico</h3><h2 id="完成页面空结构"><a href="#完成页面空结构" class="headerlink" title="完成页面空结构"></a>完成页面空结构</h2><h3 id="约定编码规范"><a href="#约定编码规范" class="headerlink" title="约定编码规范"></a>约定编码规范</h3><h2 id="构建顶部通栏"><a href="#构建顶部通栏" class="headerlink" title="构建顶部通栏"></a>构建顶部通栏</h2><h3 id="container类"><a href="#container类" class="headerlink" title="container类"></a>container类</h3><ul><li>用于定义一个固定宽度且居中的版心</li></ul><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'itcast'</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../font/MiFie-Web-Font.eot'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>), <span class="built_in">url</span>(<span class="string">'../font/MiFie-Web-Font.svg'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>), <span class="built_in">url</span>(<span class="string">'../font/MiFie-Web-Font.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>), <span class="built_in">url</span>(<span class="string">'../font/MiFie-Web-Font.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[class^="icon-"]</span>,</span><br><span class="line"><span class="selector-attr">[class*=" icon-"]</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: itcast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><ul><li>eot : embedded-opentype</li><li>svg : svg</li><li>ttf : truetype</li><li>woff : woff</li></ul><h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><h4 id="row类"><a href="#row类" class="headerlink" title="row类"></a>row类</h4><h4 id="col-类"><a href="#col-类" class="headerlink" title="col-\-*类"></a>col-<em>\</em>-*类</h4><h3 id="按钮样式生成"><a href="#按钮样式生成" class="headerlink" title="按钮样式生成"></a>按钮样式生成</h3><ul><li><a href="http://blog.koalite.com/bbg/" target="_blank" rel="noopener">http://blog.koalite.com/bbg/</a></li></ul><h3 id="小屏幕隐藏"><a href="#小屏幕隐藏" class="headerlink" title="小屏幕隐藏"></a>小屏幕隐藏</h3><h2 id="导航通栏"><a href="#导航通栏" class="headerlink" title="导航通栏"></a>导航通栏</h2><h3 id="Bootstrap扩展"><a href="#Bootstrap扩展" class="headerlink" title="Bootstrap扩展"></a>Bootstrap扩展</h3><h3 id="品牌logo"><a href="#品牌logo" class="headerlink" title="品牌logo"></a>品牌logo</h3><h3 id="菜单行高调整"><a href="#菜单行高调整" class="headerlink" title="菜单行高调整"></a>菜单行高调整</h3><h2 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h2><h3 id="Bootstrap-JS插件使用"><a href="#Bootstrap-JS插件使用" class="headerlink" title="Bootstrap JS插件使用"></a>Bootstrap JS插件使用</h3><h3 id="background使用"><a href="#background使用" class="headerlink" title="background使用"></a>background使用</h3><h4 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h4><ul><li>length</li><li>percentage</li><li>cover</li><li>contain</li></ul><h3 id="图片响应式"><a href="#图片响应式" class="headerlink" title="图片响应式"></a>图片响应式</h3><ul><li>目的</li><li>实现方式</li></ul><h3 id="window-resize事件"><a href="#window-resize事件" class="headerlink" title="window resize事件"></a>window resize事件</h3><h2 id="网站特性"><a href="#网站特性" class="headerlink" title="网站特性"></a>网站特性</h2><h3 id="网格系统"><a href="#网格系统" class="headerlink" title="网格系统"></a>网格系统</h3><h3 id="媒体对象样式"><a href="#媒体对象样式" class="headerlink" title="媒体对象样式"></a>媒体对象样式</h3><h3 id="响应式辅助类型"><a href="#响应式辅助类型" class="headerlink" title="响应式辅助类型"></a>响应式辅助类型</h3><pre><code>- hidden-xx</code></pre><h2 id="预约投标"><a href="#预约投标" class="headerlink" title="预约投标"></a>预约投标</h2><h3 id="pull-left"><a href="#pull-left" class="headerlink" title="pull-left"></a>pull-left</h3><h3 id="pull-right"><a href="#pull-right" class="headerlink" title="pull-right"></a>pull-right</h3><h2 id="投资产品"><a href="#投资产品" class="headerlink" title="投资产品"></a>投资产品</h2><h3 id="Tab选项卡"><a href="#Tab选项卡" class="headerlink" title="Tab选项卡"></a>Tab选项卡</h3><h3 id="网格系统-1"><a href="#网格系统-1" class="headerlink" title="网格系统"></a>网格系统</h3><h3 id="before"><a href="#before" class="headerlink" title="::before"></a>::before</h3><h3 id="after"><a href="#after" class="headerlink" title="::after"></a>::after</h3><h3 id="tooltip插件"><a href="#tooltip插件" class="headerlink" title="tooltip插件"></a>tooltip插件</h3><h2 id="新闻资讯"><a href="#新闻资讯" class="headerlink" title="新闻资讯"></a>新闻资讯</h2><h3 id="Tab选项卡-1"><a href="#Tab选项卡-1" class="headerlink" title="Tab选项卡"></a>Tab选项卡</h3><h3 id="响应式偏移"><a href="#响应式偏移" class="headerlink" title="响应式偏移"></a>响应式偏移</h3><h2 id="合作伙伴"><a href="#合作伙伴" class="headerlink" title="合作伙伴"></a>合作伙伴</h2><h3 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h3><h2 id="登录对话框"><a href="#登录对话框" class="headerlink" title="登录对话框"></a>登录对话框</h2><h3 id="模态框"><a href="#模态框" class="headerlink" title="模态框"></a>模态框</h3><h3 id="表单样式"><a href="#表单样式" class="headerlink" title="表单样式"></a>表单样式</h3><h2 id="导航吸顶"><a href="#导航吸顶" class="headerlink" title="导航吸顶"></a>导航吸顶</h2><h3 id="affix组件"><a href="#affix组件" class="headerlink" title="affix组件"></a>affix组件</h3><h1 id="深度自定义"><a href="#深度自定义" class="headerlink" title="深度自定义"></a>深度自定义</h1><h3 id="http-v3-bootcss-com-customize"><a href="#http-v3-bootcss-com-customize" class="headerlink" title="http://v3.bootcss.com/customize"></a><a href="http://v3.bootcss.com/customize" target="_blank" rel="noopener">http://v3.bootcss.com/customize</a></h3><h3 id="通过-Less-文件修改"><a href="#通过-Less-文件修改" class="headerlink" title="通过 Less 文件修改"></a>通过 Less 文件修改</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微金所项目实战&quot;&gt;&lt;a href=&quot;#微金所项目实战&quot; class=&quot;headerlink&quot; title=&quot;微金所项目实战&quot;&gt;&lt;/a&gt;微金所项目实战&lt;/h1&gt;&lt;h2 id=&quot;搭建Bootstrap页面骨架及项目目录结构&quot;&gt;&lt;a href=&quot;#搭建Bootstrap
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/05/25/bootstrap-1/"/>
    <id>http://yoursite.com/2019/05/25/bootstrap-1/</id>
    <published>2019-05-25T02:26:38.738Z</published>
    <updated>2015-12-12T06:37:21.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是Bootstrap？"><a href="#什么是Bootstrap？" class="headerlink" title="什么是Bootstrap？"></a>什么是Bootstrap？</h3><p><img src="/2019/05/25/bootstrap-1/./images/cover.png" alt="Bootstrap 官网"></p><ul><li>框架：库 lib library</li><li>jQuery作为一个框架来讲，提供一套比较便捷的操作DOM的方式</li><li>把大家都需要的功能预先写好到一些文件  这就是一个框架</li><li><p>Bootstrap 让我们的 Web 开发更简单，更快捷；</p></li><li><p>注意是 Bootstrap 不是 BootStrap！这是一个词，不是合成词，其含义为：n. 引导指令,引导程序</p></li><li>Bootstrap 是当下最流行的前端框架（界面工具集）；</li><li>特点就是灵活简洁，代码优雅，美观大方；</li><li>其目的是为了让 Web 开发更敏捷；</li><li>是 Twitter 公司的两名前端工程师 Mark Otto 和 Jacob Thornton 在 2011 - 年发起的，并利用业余时间完成第一个版本的开发；</li></ul><h3 id="为什么使用Bootstarp？"><a href="#为什么使用Bootstarp？" class="headerlink" title="为什么使用Bootstarp？"></a>为什么使用Bootstarp？</h3><ul><li>生态圈火，不断地更新迭代；</li><li>提供一套美观大方地界面组件；</li><li>提供一套优雅的 HTML+CSS 编码规范；</li><li>让我们的 Web 开发更简单，更快捷；</li></ul><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><blockquote><p>使用 Bootstrap 并不代表不用写 CSS 样式，而是不用写绝大多数大家都会用到的样式</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="下载Bootstrap"><a href="#下载Bootstrap" class="headerlink" title="下载Bootstrap"></a>下载Bootstrap</h3><ul><li><a href="https://github.com/twbs/bootstrap/releases/download/v3.3.6/bootstrap-3.3.6-dist.zip" target="_blank" rel="noopener">https://github.com/twbs/bootstrap/releases/download/v3.3.6/bootstrap-3.3.6-dist.zip</a></li><li><a href="https://github.com/twbs/bootstrap/releases/download/v4.0.0-alpha.2/bootstrap-4.0.0-alpha.2-dist.zip" target="_blank" rel="noopener">https://github.com/twbs/bootstrap/releases/download/v4.0.0-alpha.2/bootstrap-4.0.0-alpha.2-dist.zip</a></li></ul><h3 id="安装Bootstrap"><a href="#安装Bootstrap" class="headerlink" title="安装Bootstrap"></a>安装Bootstrap</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入Bootstrap核心样式文件（必须） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入Bootstrap默认主题样式（可选） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.theme.min.css"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 你自己的样式或其他文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"example.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 你的HTML结构...... --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 以下代码，如果不使用JS插件则不需要 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 由于Bootstrap的JS插件依赖jQuery，so 引入jQuery --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入所有的Bootstrap的JS插件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 你自己的脚本文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"example.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Bootstrap文档"><a href="#Bootstrap文档" class="headerlink" title="Bootstrap文档"></a>Bootstrap文档</h3><ul><li><a href="http://getbootstrap.com/" target="_blank" rel="noopener">官方文档</a></li><li><a href="http://v3.bootcss.com/" target="_blank" rel="noopener">中文文档</a></li></ul><h3 id="基础的Bootstrap模板"><a href="#基础的Bootstrap模板" class="headerlink" title="基础的Bootstrap模板"></a>基础的Bootstrap模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 101 Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Compatible"><a href="#Compatible" class="headerlink" title="Compatible"></a>Compatible</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>此属性为文档兼容模式声明，表示如果在IE浏览器下则使用最新的标准渲染当前文档</li></ul><h3 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>视口的作用：在移动浏览器中，当页面宽度超出设备，浏览器内部虚拟的一个页面容器，将页面容器缩放到设备这么大，然后展示</li><li>目前大多数手机浏览器的视口（承载页面的容器）宽度都是980；</li><li>视口的宽度可以通过meta标签设置</li><li>此属性为移动端页面视口设置，当前值表示在移动端页面的宽度为设备的宽度，并且不缩放（缩放级别为1）<ul><li>width:视口的宽度</li><li>initial-scale：初始化缩放</li><li>user-scalable:是否允许用户自行缩放（值：yes/no; 1/0）</li><li>minimum-scale:最小缩放，一般设置了用户不允许缩放，就没必要设置最小和最大缩放</li><li>maximum-scale:最大缩放</li></ul></li></ul><h3 id="条件注释"><a href="#条件注释" class="headerlink" title="条件注释"></a>条件注释</h3><ul><li>条件注释的作用就是当判断条件满足时，就会执行注释中的HTML代码，不满足时会当做注释忽略掉</li></ul><h3 id="第三方依赖"><a href="#第三方依赖" class="headerlink" title="第三方依赖"></a>第三方依赖</h3><ul><li><p><a href="https://github.com/jquery/jquery" target="_blank" rel="noopener">jQuery</a></p><blockquote><p>Bootstrap框架中的所有JS组件都依赖于jQuery实现</p></blockquote></li><li><p><a href="https://github.com/aFarkas/html5shiv" target="_blank" rel="noopener">html5shiv</a></p><blockquote><p>让低版本浏览器可以识别HTML5的新标签，如header、footer、section等</p></blockquote></li><li><p><a href="https://github.com/scottjehl/Respond" target="_blank" rel="noopener">respond</a></p><blockquote><p>让低版本浏览器可以支持CSS媒体查询功能</p></blockquote></li></ul><h2 id="建议以后在HTML中将脚步的引入放到页面最底下"><a href="#建议以后在HTML中将脚步的引入放到页面最底下" class="headerlink" title="建议以后在HTML中将脚步的引入放到页面最底下"></a>建议以后在HTML中将脚步的引入放到页面最底下</h2><h2 id="mediaquery"><a href="#mediaquery" class="headerlink" title="mediaquery"></a>mediaquery</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> (判断条件（针对于当前窗口的判断）)&#123;</span><br><span class="line">    <span class="comment">/*这里的代码只有当判断条件满足时才会执行*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">768px</span>) and (max-width: <span class="number">992px</span>) &#123;</span><br><span class="line">  <span class="comment">/*这里的代码只有当(min-width: 1280px)满足时才会执行*/</span></span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">750px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当使用min-width作为判断条件一定要从小到大，其原因是CSS从上往下执行</li></ul><h2 id="基础CSS样式"><a href="#基础CSS样式" class="headerlink" title="基础CSS样式"></a>基础CSS样式</h2><ul><li><a href="http://v3.bootcss.com/css/#overview" target="_blank" rel="noopener">概要</a><br>  + </li><li><a href="http://v3.bootcss.com/css/#type" target="_blank" rel="noopener">预置排版样式</a><ul><li>统一预制标签样式</li><li></li></ul></li><li><a href="http://v3.bootcss.com/css/#buttons" target="_blank" rel="noopener">按钮样式</a><br>  + </li><li><a href="http://v3.bootcss.com/css/#tables" target="_blank" rel="noopener">表格样式</a><br>  + </li><li><a href="http://v3.bootcss.com/css/#forms" target="_blank" rel="noopener">表单样式</a><br>  + </li><li><a href="http://v3.bootcss.com/css/#images" target="_blank" rel="noopener">图片样式</a><br>  + </li><li><a href="http://v3.bootcss.com/css/#helper-classes" target="_blank" rel="noopener">辅助工具类</a><br>  + </li><li><a href="http://v3.bootcss.com/css/#code" target="_blank" rel="noopener">代码样式</a><br>  + </li><li><a href="http://v3.bootcss.com/css/#grid" target="_blank" rel="noopener">栅格系统</a><ul><li><strong>xs</strong> : 超小屏幕 手机 (&lt;768px)  </li><li><strong>sm</strong> : 小屏幕 平板 (≥768px) </li><li><strong>md</strong> : 中等屏幕 桌面显示器 (≥992px) </li><li><strong>lg</strong> : 大屏幕 大桌面显示器 (≥1200px)</li></ul></li><li><a href="http://v3.bootcss.com/css/#responsive-utilities" target="_blank" rel="noopener">响应式工具类</a><ul><li><strong>hidden-xx</strong> : 在某种屏幕下隐藏 </li><li><strong>visible-xx</strong> : 在某种屏幕尺寸下显示</li></ul></li></ul><h2 id="预置界面组件"><a href="#预置界面组件" class="headerlink" title="预置界面组件"></a>预置界面组件</h2><ul><li><a href="http://v3.bootcss.com/components/#nav" target="_blank" rel="noopener">导航</a></li><li><a href="http://v3.bootcss.com/components/#navbar" target="_blank" rel="noopener">导航条</a></li><li><a href="http://v3.bootcss.com/components/#breadcrumbs" target="_blank" rel="noopener">面包屑导航</a></li><li><a href="http://v3.bootcss.com/components/#dropdowns" target="_blank" rel="noopener">下拉菜单</a></li><li><a href="http://v3.bootcss.com/components/#btn-dropdowns" target="_blank" rel="noopener">按钮式下拉菜单</a></li><li><a href="http://v3.bootcss.com/components/#btn-groups" target="_blank" rel="noopener">按钮组</a></li><li><a href="http://v3.bootcss.com/components/#input-groups" target="_blank" rel="noopener">输入框组</a></li><li><a href="http://v3.bootcss.com/components/#alerts" target="_blank" rel="noopener">警告框</a></li><li><a href="http://v3.bootcss.com/components/#page-header" target="_blank" rel="noopener">页头</a></li><li><a href="http://v3.bootcss.com/components/#pagination" target="_blank" rel="noopener">分页</a></li><li><a href="http://v3.bootcss.com/components/#list-group" target="_blank" rel="noopener">列表组</a></li><li><a href="http://v3.bootcss.com/components/#panels" target="_blank" rel="noopener">面板</a></li><li><a href="http://v3.bootcss.com/components/#media" target="_blank" rel="noopener">媒体对象</a></li><li><a href="http://v3.bootcss.com/components/#progress" target="_blank" rel="noopener">进度条</a></li><li><a href="http://v3.bootcss.com/components/#glyphicons" target="_blank" rel="noopener">Glyphicons</a></li><li><a href="http://v3.bootcss.com/components/#labels" target="_blank" rel="noopener">标签</a></li><li><a href="http://v3.bootcss.com/components/#badges" target="_blank" rel="noopener">徽章</a></li><li><a href="http://v3.bootcss.com/components/#thumbnails" target="_blank" rel="noopener">缩略图</a></li><li><a href="http://v3.bootcss.com/components/#jumbotron" target="_blank" rel="noopener">大屏幕</a></li><li><a href="http://v3.bootcss.com/components/#responsive-embed" target="_blank" rel="noopener">嵌入内容</a></li><li><a href="http://v3.bootcss.com/components/#wells" target="_blank" rel="noopener">内嵌</a></li></ul><h2 id="JavaScript插件"><a href="#JavaScript插件" class="headerlink" title="JavaScript插件"></a>JavaScript插件</h2><h3 id="JavaScript插件的依赖情况"><a href="#JavaScript插件的依赖情况" class="headerlink" title="JavaScript插件的依赖情况"></a>JavaScript插件的依赖情况</h3><h3 id="如何使用Javascript插件"><a href="#如何使用Javascript插件" class="headerlink" title="如何使用Javascript插件"></a>如何使用Javascript插件</h3><h3 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h3><ul><li><a href="http://v3.bootcss.com/javascript/#modals" target="_blank" rel="noopener">模态对话框</a></li><li><a href="http://v3.bootcss.com/javascript/#dropdowns" target="_blank" rel="noopener">下拉菜单</a></li><li><a href="http://v3.bootcss.com/javascript/#scrollspy" target="_blank" rel="noopener">滚动监听</a></li><li><a href="http://v3.bootcss.com/javascript/#tabs" target="_blank" rel="noopener">标签页</a></li><li><a href="http://v3.bootcss.com/javascript/#tooltips" target="_blank" rel="noopener">工具提示</a></li><li><a href="http://v3.bootcss.com/javascript/#popovers" target="_blank" rel="noopener">弹出框</a></li><li><a href="http://v3.bootcss.com/javascript/#alerts" target="_blank" rel="noopener">警告框</a></li><li><a href="http://v3.bootcss.com/javascript/#buttons" target="_blank" rel="noopener">按钮</a></li><li><a href="http://v3.bootcss.com/javascript/#collapse" target="_blank" rel="noopener">折叠面板</a></li><li><a href="http://v3.bootcss.com/javascript/#carousel" target="_blank" rel="noopener">轮播图</a></li><li><a href="http://v3.bootcss.com/javascript/#affix" target="_blank" rel="noopener">吸顶效果</a><ul><li>data-spy=”affix”</li><li>data-offset-top=”什么位置出现”</li><li>data-offset-bottom=”什么位置消失”</li></ul></li></ul><h2 id="深度自定义-Bootstrap"><a href="#深度自定义-Bootstrap" class="headerlink" title="深度自定义 Bootstrap"></a>深度自定义 Bootstrap</h2><h3 id="在线自定义"><a href="#在线自定义" class="headerlink" title="在线自定义"></a>在线自定义</h3><ul><li><a href="http://getbootstrap.com/customize/" target="_blank" rel="noopener">官网在线</a></li><li><a href="http://v3.bootcss.com/customize/" target="_blank" rel="noopener">中文网在线</a></li></ul><h3 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h3><h3 id="LESS语言"><a href="#LESS语言" class="headerlink" title="LESS语言"></a>LESS语言</h3><ul><li><a href="http://lesscss.org/" target="_blank" rel="noopener">官方文档</a></li><li><a href="http://lesscss.cn/" target="_blank" rel="noopener">中文文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Bootstrap&quot;&gt;&lt;a href=&quot;#Bootstrap&quot; class=&quot;headerlink&quot; title=&quot;Bootstrap&quot;&gt;&lt;/a&gt;Bootstrap&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端注意</title>
    <link href="http://yoursite.com/2019/05/24/%E5%89%8D%E7%AB%AF%E6%B3%A8%E6%84%8F/"/>
    <id>http://yoursite.com/2019/05/24/前端注意/</id>
    <published>2019-05-24T07:57:55.000Z</published>
    <updated>2019-05-24T23:39:39.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VsCode中使用Emmet神器快速编写HTML代码"><a href="#VsCode中使用Emmet神器快速编写HTML代码" class="headerlink" title="VsCode中使用Emmet神器快速编写HTML代码"></a><a href="https://www.cnblogs.com/summit7ca/p/6944215.html" target="_blank" rel="noopener">VsCode中使用Emmet神器快速编写HTML代码</a></h1><h2 id="一、Emmet简述"><a href="#一、Emmet简述" class="headerlink" title="一、Emmet简述#"></a>一、Emmet简述<a href="https://www.cnblogs.com/summit7ca/p/6944215.html#idx_0" target="_blank" rel="noopener">#</a></h2><p>Emmet (前身为 Zen Coding) 是一个能大幅度提高前端开发效率的一个工具. 在前端开发的过程中，一大部分的工作是写 HTML、CSS 代码。特别是手动编写 HTML 代码的时候，效率会特别低下，因为需要敲打很多尖括号，而且很多标签都需要闭合标签等。于是，就有了 Emmet，它可以极大的提高代码编写的效率，它提供了一种非常简练的语法规则，然后立刻生成对应的 HTML 结构或者 CSS 代码，同时还有多种实用的功能帮助进行前端开发。<br>VsCode内置了Emmet语法,在后缀为.html/.css中输入缩写后按Tab键即会自动生成相应代码</p><blockquote><p>请注意在VsCode新版本中按Tab不再默认启用Emmet展开缩写!需要在首选项配置中将emmet.triggerExpansionOnTab设置为true值!</p></blockquote><p>语法基本规则如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CopyE 代表HTML标签。</span><br><span class="line">E#id 代表id属性。</span><br><span class="line">E.class 代表class属性。</span><br><span class="line">E[attr=foo] 代表某一个特定属性。</span><br><span class="line">E&#123;foo&#125; 代表标签包含的内容是foo。</span><br><span class="line">E&gt;N 代表N是E的子元素。</span><br><span class="line">E+N 代表N是E的同级元素。</span><br><span class="line">E^N 代表N是E的上级元素。</span><br></pre></td></tr></table></figure><blockquote><p>本文仅介绍了在Html使用Emmet,<br>如果想Css缩写的语法请参考这里<a href="https://docs.emmet.io/css-abbreviations/" target="_blank" rel="noopener">https://docs.emmet.io/css-abbreviations/</a><br>-–</p></blockquote><h2 id="二、基础用法"><a href="#二、基础用法" class="headerlink" title="二、基础用法#"></a>二、基础用法<a href="https://www.cnblogs.com/summit7ca/p/6944215.html#idx_1" target="_blank" rel="noopener">#</a></h2><ul><li><strong>元素(Elements)</strong><br>您可以使用元素的名称，如div或p来生成HTML标签。Emmet没有一组可用的标签名称，可以写任何单词并将其转换为标签。也就是只要知道元素的缩写,Emmet会自动转换成对应标签.<br>形如:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Copydiv =&gt; &lt;div&gt; &lt;/div&gt;</span><br><span class="line">foo =&gt; &lt;foo&gt; &lt;/foo&gt;</span><br><span class="line">html:5 =&gt; 将生成html5标准的包含body为空基本dom</span><br><span class="line">html:xt =&gt; 生成XHTML过渡文档类型,DOCTYPE为XHTML</span><br><span class="line">html:4s =&gt; 生成HTML4严格文档类型,DOCTYPE为HTML 4.01</span><br><span class="line">a:mail          =&gt; &lt;a href=&quot;mailto:&quot;&gt;&lt;/a&gt;</span><br><span class="line">a:link          =&gt; &lt;a href=&quot;http://&quot;&gt;&lt;/a&gt;</span><br><span class="line">base            =&gt; &lt;base href=&quot;&quot;&gt;</span><br><span class="line">br              =&gt; &lt;br&gt;</span><br><span class="line">link            =&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;</span><br><span class="line">script:src      =&gt; &lt;script src=&quot;&quot;&gt;&lt;/script&gt;</span><br><span class="line">form:get        =&gt; &lt;form action=&quot;&quot; method=&quot;get&quot;&gt;&lt;/form&gt;</span><br><span class="line">label           =&gt; &lt;label for=&quot;&quot;&gt;&lt;/label&gt;</span><br><span class="line">input           =&gt; &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">inp             =&gt; &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot;&gt;</span><br><span class="line">input:hidden    =&gt; &lt;input type=&quot;hidden&quot; name=&quot;&quot;&gt; input:h亦可</span><br><span class="line">input:email     =&gt; &lt;input type=&quot;email&quot; name=&quot;&quot; id=&quot;&quot;&gt;</span><br><span class="line">input:password  =&gt; &lt;input type=&quot;password&quot; name=&quot;&quot; id=&quot;&quot;&gt;</span><br><span class="line">input:checkbox  =&gt; &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot;&gt;</span><br><span class="line">input:radio     =&gt; &lt;input type=&quot;radio&quot; name=&quot;&quot; id=&quot;&quot;&gt;</span><br><span class="line">select          =&gt; &lt;select name=&quot;&quot; id=&quot;&quot;&gt;&lt;/select&gt;</span><br><span class="line">option          =&gt; &lt;option value=&quot;&quot;&gt;&lt;/option&gt;</span><br><span class="line">bq              =&gt; &lt;blockquote&gt;&lt;/blockquote&gt;</span><br><span class="line">btn             =&gt; &lt;button&gt;&lt;/button&gt;</span><br><span class="line">btn:s           =&gt; &lt;button type=&quot;submit&quot;&gt;&lt;/button&gt;</span><br><span class="line">btn:r           =&gt; &lt;button type=&quot;reset&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>文本操作符(Text)</strong><br>如果想在生成元素的同时添加文本内容可以使用{}</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Copydiv&#123;这是一段文本&#125;</span><br><span class="line">&lt;div&gt;这是一段文本&lt;/div&gt;</span><br><span class="line">a&#123;点我点我&#125;</span><br><span class="line">&lt;a href=&quot;&quot;&gt;点我点我&lt;/a&gt;</span><br></pre></td></tr></table></figure><ul><li><p>属性操作符(Attribute operators)</p><p>属性运算符用于修改输出元素的属性.</p><ul><li>Id和Class (elem#id and elem.class )</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Copydiv.test  =&gt; &lt;div class=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">div#pageId =&gt; &lt;div id=&quot;pageId&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>隐式标签则会自动联想生成对应元素,根据配置规则不同生成的结果也是不同的.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Copy.class</span><br><span class="line">=&gt;</span><br><span class="line">&lt;div class&gt;&lt;/div&gt;</span><br><span class="line">em&gt;.class</span><br><span class="line">=&gt;</span><br><span class="line">&lt;em&gt;&lt;span class&gt;&lt;/span&gt;&lt;/em&gt;</span><br><span class="line">table&gt;.row&gt;.col</span><br><span class="line">=&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;td class=&quot;col&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>绑定多个类名用.符号连续起来即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Copydiv.test1.test2.test3</span><br><span class="line">=&gt;</span><br><span class="line">&lt;div class=&quot;test1 test2 test3&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>自定义属性使用 [attr1=’’ attr2=’’]</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Copya[href=&apos;#&apos; data-title=&apos;customer&apos; target=&apos;_blank&apos;]</span><br><span class="line">=&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; data-title=&quot;customer&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>嵌套操作符(Nesting operators)</p><p>嵌套操作符用于将缩写元素放置在生成的树中,是否应放置在上下文元素的内部或附近.</p><ul><li>子级:&gt;<br>通过&gt;标识元素可以生成嵌套子级元素,可以配合元素属性进行连写<br><code>div#pageId&gt;ul&gt;li =&gt; &lt;div id=&quot;pageId&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;</code></li><li>同级:+<br>+字符表示生成兄弟级元素.<br><code>div#pageId+div.child =&gt; &lt;div id=&quot;pageId&quot;&gt;&lt;/div&gt; &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;</code></li><li>父级:^<br>^用于生成父级元素的同级元素,从这个^字符所在位置开始,查找左侧最近的元素的父级元素并生成其兄弟级元素.<br><code>div&gt;p.parent&gt;span.child^ul.brother&gt;li =&gt; &lt;div&gt; &lt;p class=&quot;parent&quot;&gt;&lt;span class=&quot;child&quot;&gt;&lt;/span&gt;&lt;/p&gt; &lt;ul class=&quot;brother&quot;&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;</code></li></ul></li><li><p><strong>分组操作符(Grouping)</strong><br>分组使用()来实现缩写的分离.比如这个例子,如果不加括号那么a将作为span的子级元素生成.加上括号a将于()内的元素同级.</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Copydiv&gt;(ul&gt;li+span)&gt;a</span><br><span class="line">=&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;a href=&quot;&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>乘法(Multiplication)</strong><br>使用<em>N即可自动生成重复项.N是一个正整数.在使用时请注意</em>N所在位置,位置不同生成的结果不同.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Copyul&gt;li*3</span><br><span class="line">=&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>自动计数(numbering)</strong><br>这个功能挺方便的对于生成重复项时增加一个序号,只需要加上$符号即可.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Copyul&gt;li.item$&#123;item number:$&#125;*3</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li class=&quot;item1&quot;&gt;item number:1&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item2&quot;&gt;item number:2&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item3&quot;&gt;item number:3&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>如果生成两位数则使用两个连续的$$,更多位数以此类推…<br>使用@修饰符，可以更改编号方向（升序或降序）和基数（例如起始值）.注意这个操作符在$之后添加<br>@-表示降序,@+表示升序,默认使用升序.<br>@N可以改变起始值.需要注意的是如果配合升降序使用的话N是放到+-符后.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Copyul&gt;li.item$@-*3</span><br><span class="line">=&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item2&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item1&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">---------------------------</span><br><span class="line">ul&gt;li.item$@-10*3</span><br><span class="line">=&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li class=&quot;item12&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item11&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item10&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>上述的操作是可以搭配使用进而得出酷炫的效果,使用时请注意空格的问题,缩写代码不要有空格否则是不会进行转换的.<br>另外如果你的编辑器中已经有了一些html智能提示代码段,比如我的VsCode还装了HTML Snippets插件,这个与Emmet语法有部分冲突,使用Tab键时会优先使用插件的代码提示,建议禁用.<br>组合起来看看效果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Copytable.table-row[role=&apos;table&apos;]&gt;(thead&gt;tr&gt;td&#123;item $@120&#125;*5)+(tbody&gt;tr&gt;(td.item$$@-)lorem10*5)</span><br></pre></td></tr></table></figure><p>这段目的在于生成一个类名为table-row,且自定义了属性role的table标签,内部包含了thead与tbody,分别生成5个td.<br>thead中td的内容是item加上自增序号,自增序号基数从120开始.<br>tbody中td拥有一个名为item加降序自增符号类名,且每个td内容随机填充10个单词.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Copy&lt;table class=&quot;table-row&quot; role=&quot;table&quot;&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;item 120&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;item 121&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;item 122&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;item 123&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;item 124&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;td class=&quot;item05&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit, assumenda.&lt;/td&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;td class=&quot;item04&quot;&gt;Magnam possimus molestias ipsum animi rem placeat, ut obcaecati laudantium.&lt;/td&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;td class=&quot;item03&quot;&gt;Consequuntur, labore ad optio cupiditate iusto dolores fugit quidem officiis.&lt;/td&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;td class=&quot;item02&quot;&gt;Veniam, explicabo consequuntur blanditiis at dicta fuga ratione eos beatae.&lt;/td&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;td class=&quot;item01&quot;&gt;Fuga voluptatum illo quis ducimus ad eveniet non. Saepe, eveniet.&lt;/td&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>再来个配合嵌套元素和计数的大栗子.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Copydiv.nav&gt;(nav#navbar&gt;(ul&gt;li&gt;(a[href=&quot;/xxx/product/$&quot; data-index=$]&gt;lorem4)*5))+div.btn[type=&apos;button&apos;]&gt;span&#123;--&#125;^^div#main</span><br></pre></td></tr></table></figure><p>这个有点复杂,看下效果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Copy&lt;div class=&quot;nav&quot;&gt;</span><br><span class="line">    &lt;nav id=&quot;navbar&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;a href=&quot;/xxx/product/1&quot; data-index=&quot;1&quot;&gt;Lorem ipsum dolor sit.&lt;/a&gt;</span><br><span class="line">                &lt;a href=&quot;/xxx/product/2&quot; data-index=&quot;2&quot;&gt;Dolor vel, quia quas.&lt;/a&gt;</span><br><span class="line">                &lt;a href=&quot;/xxx/product/3&quot; data-index=&quot;3&quot;&gt;Qui hic, corrupti eum!&lt;/a&gt;</span><br><span class="line">                &lt;a href=&quot;/xxx/product/4&quot; data-index=&quot;4&quot;&gt;Necessitatibus perspiciatis, corrupti. Praesentium!&lt;/a&gt;</span><br><span class="line">                &lt;a href=&quot;/xxx/product/5&quot; data-index=&quot;5&quot;&gt;Nostrum quos, voluptate. Velit!&lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">    &lt;div class=&quot;btn&quot; type=&quot;button&quot;&gt;&lt;span&gt;--&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;main&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="三、进阶高级用法"><a href="#三、进阶高级用法" class="headerlink" title="三、进阶高级用法#"></a>三、进阶高级用法<a href="https://www.cnblogs.com/summit7ca/p/6944215.html#idx_2" target="_blank" rel="noopener">#</a></h2><ul><li><strong>模拟文本/随机文本</strong><br>在开发时经常要填充一些文本内容占位,Emmet内置了Lorem Ipsum功能来实现.loremN或者lipsumN,N表示生成的单词数,正整数.可以不填.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Copylorem</span><br><span class="line">=&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit. Suscipit quia commodi vero sint omnis fugiat excepturi reiciendis necessitatibus totam asperiores, delectus saepe nulla consequuntur nostrum! Saepe suscipit recusandae repellendus assumenda.</span><br><span class="line"></span><br><span class="line">p&gt;lorem4</span><br><span class="line">=&gt;</span><br><span class="line">&lt;p&gt;Lorem ipsum dolor sit.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">(p&gt;lorem4)*3</span><br><span class="line">=&gt;</span><br><span class="line">&lt;p&gt;Lorem ipsum dolor sit.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Labore aperiam, consequuntur architecto.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Quidem nisi, cum odio!&lt;/p&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>包装文本</strong><br>听起来可能有点绕,通俗点解释就是把一段指定的文本包装成我们想要的结构.注意这个功能需要编辑器的支持,举个大栗子:<br>比如PM给了这样一段文本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Copy首页</span><br><span class="line">产品介绍</span><br><span class="line">相关案例</span><br><span class="line">关于我们</span><br><span class="line">联系我们</span><br><span class="line">而我们预期的效果是这样</span><br><span class="line">&lt;nav&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;首页&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;产品介绍&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;相关案例&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;关于我们&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;联系我们&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/nav&gt;</span><br></pre></td></tr></table></figure><ol><li><p>选中文本,按下<code>ctrl+shift+p</code>打开命令窗口输入ewrap</p></li><li><p>选择<code>Emmet:使用缩写进行包装(Wrap with Abbreviation)</code>选项<br><img src="https://images2015.cnblogs.com/blog/648483/201706/648483-20170605122055715-1250857112.png" alt="img"></p></li><li><p>输入缩写字符<code>nav&gt;ul&gt;li*</code>按下回车键即可看到效果.<br>当然也可以在菜单=&gt;编辑=&gt;Emmet(M)..然后输入.</p><blockquote><p>这里需要的注意的地方是输入的缩写代码中*所在位置不同得到的效果也是不同的.</p></blockquote></li></ol><p>另外如果给的文本带有序号的情况,我们也是可以通过缩写来处理,而不是手动删除,主要用的是<code>|t</code>来处理.<br>比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Copy    1.首页</span><br><span class="line">    2.产品介绍</span><br><span class="line">    3.相关案例</span><br><span class="line">    4.关于我们</span><br><span class="line">    5.联系我们</span><br><span class="line">    输入包装字符命令</span><br><span class="line">    nav&gt;ul&gt;li*|t</span><br><span class="line">    即可看到生成的html中自动去掉了序号</span><br></pre></td></tr></table></figure><p>针对上边说的几种情况来演示一下.<br><img src="https://images2015.cnblogs.com/blog/648483/201706/648483-20170605122015012-1752202759.gif" alt="img"><br>利用好Emmet来快速编写html代码,能提升工作效率不用在一个个敲闭合标签,简直是我等偷懒党神器.赶快去耍耍吧.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VsCode中使用Emmet神器快速编写HTML代码&quot;&gt;&lt;a href=&quot;#VsCode中使用Emmet神器快速编写HTML代码&quot; class=&quot;headerlink&quot; title=&quot;VsCode中使用Emmet神器快速编写HTML代码&quot;&gt;&lt;/a&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端几个构建工具</title>
    <link href="http://yoursite.com/2019/05/20/%E5%89%8D%E7%AB%AF%E5%87%A0%E4%B8%AA%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2019/05/20/前端几个构建工具/</id>
    <published>2019-05-19T18:40:35.000Z</published>
    <updated>2019-05-20T00:13:11.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-npm-就不扯了，天天用-npm-下载的依赖安装位置："><a href="#1-npm-就不扯了，天天用-npm-下载的依赖安装位置：" class="headerlink" title="1.npm 就不扯了，天天用,npm 下载的依赖安装位置："></a>1.npm 就不扯了，天天用,npm 下载的依赖安装位置：</h2><ol start="0"><li>若是全局npm install -g 则放在C:\Users\fang\AppData\Roaming\npm\node_modules 是默认位置</li><li>若是在命令行输入npm install 没有-g,就是在当前目录<br><img src="/2019/05/20/前端几个构建工具/npmaa.bmp" alt="npm"><br>npm init 会在当前目录下初始化package.json来管理npm信息</li></ol><h2 id="2-bower"><a href="#2-bower" class="headerlink" title="2.bower"></a>2.bower</h2><p>包管理工具，和npm一样。web应用程序依赖管理。<br>安装：npm install -g bower,命令和npm差不多</p><ul><li>bower init 清单文件定义bower.json。这类似于Node package.json或Ruby Gemfile。</li><li>一般来说bower install jQuery –save-dev ，这个操作可以往bower.json里面写入对应的模块，它可以实现不同之间的重复安装。其他项目成员，拿到项目之后，只需要bower install 就好了。bower install是可以直接从bower.json里面读出来的，其他项目成员就不需要写bower install jQuery了。</li><li>现在npm最常用于Node.Js模块，Npm是嵌套依赖树的关系，你应该知道删除npm模块，你不用rimraf node_modules模块，都不行，嵌套依赖就是，你依赖我，我依赖它，再依赖它。NPM嵌套依赖用在服务器上十分好，不用关心版本冲突问题等等。  Bower是专门为前端创建的，它对于依赖的管理是属于扁平化的。</li><li>现在一般项目里面，既有Bower和Node，因为前端还需要一些Gulp，Webpack这样的构建工具。</li></ul><h2 id="3-gulp"><a href="#3-gulp" class="headerlink" title="3.gulp"></a>3.gulp</h2><h3 id="3-1-gulp简介"><a href="#3-1-gulp简介" class="headerlink" title="3.1.gulp简介"></a>3.1.gulp简介</h3><ul><li>链接：<ul><li><a href="http://gulpjs.com/" target="_blank" rel="noopener">官网</a></li><li><a href="http://www.gulpjs.com.cn/" target="_blank" rel="noopener">中文网</a><br>-就是用来机械化的完成重复性质的工作</li></ul></li><li>gulp的机制就是将重复的工作抽象成一个个任务</li></ul><h3 id="3-2-gulp准备工作"><a href="#3-2-gulp准备工作" class="headerlink" title="3.2.gulp准备工作"></a>3.2.gulp准备工作</h3><ul><li>安装Node.js</li><li>安装 gulp 命令行工具<ul><li><code>npm install -g gulp</code></li></ul></li><li>初始化 gulp 项目</li><li>创建任务 - gulpfile.js</li></ul><h2 id="4-webpack"><a href="#4-webpack" class="headerlink" title="4.webpack"></a>4.webpack</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-npm-就不扯了，天天用-npm-下载的依赖安装位置：&quot;&gt;&lt;a href=&quot;#1-npm-就不扯了，天天用-npm-下载的依赖安装位置：&quot; class=&quot;headerlink&quot; title=&quot;1.npm 就不扯了，天天用,npm 下载的依赖安装位置：&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue的ui框架</title>
    <link href="http://yoursite.com/2019/05/19/vue%E7%9A%84ui%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/05/19/vue的ui框架/</id>
    <published>2019-05-18T18:05:00.000Z</published>
    <updated>2019-05-19T16:06:16.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue的ui框架"><a href="#vue的ui框架" class="headerlink" title="vue的ui框架"></a>vue的ui框架</h1><p>Element Ui 基于vue 的pc端UI框架 <a href="http://element.eleme.io/" target="_blank" rel="noopener">Element Ui</a></p><p>MintUi 基于vue移动端的ui框架  <a href="http://mint-ui.github.io/#!/en" target="_blank" rel="noopener">MintUi</a></p><h2 id="如果api上面的例子无法执行，就看demo-直接引入到组件"><a href="#如果api上面的例子无法执行，就看demo-直接引入到组件" class="headerlink" title="如果api上面的例子无法执行，就看demo,直接引入到组件"></a>如果api上面的例子无法执行，就看demo,直接引入到组件</h2><ol><li>import infiniteScroll from ‘../infinite-scroll.vue’;</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&apos;V-infiniteScroll&apos;:infiniteScroll</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>view中\<v-infinitescroll>\</v-infinitescroll>就可以了</p></li></ol><h2 id="MintUi-infinite-scroll结合api接口实现真实下拉分页加载更多"><a href="#MintUi-infinite-scroll结合api接口实现真实下拉分页加载更多" class="headerlink" title="MintUi infinite-scroll结合api接口实现真实下拉分页加载更多"></a>MintUi infinite-scroll结合api接口实现真实下拉分页加载更多</h2><p><img src="/2019/05/19/vue的ui框架/vue-ui/infinite-scroll.png" alt="下拉分页加载更多"></p><ul><li>首先解释,webpack打包工具，就是将vue、es6等等解析成了浏览器可以识别的js，html文件。</li><li>MintUi是手机端下拉分页加载更多</li></ul><ol start="0"><li>安装插件<ul><li><code>npm install mint-ui -S</code></li></ul></li><li>在main.js中引入<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MintUI <span class="keyword">from</span> <span class="string">'mint-ui'</span></span><br><span class="line">Vue.use(Mint);</span><br></pre></td></tr></table></figure></li></ol><ul><li>templdate模板中插入infinite-scroll的html,其中loadMore是滚动到列表底部时，触发的方法，loading是开启关闭触发的loadMore方法，默认是false即关闭diabled，所以页面刷新就会默认触发loadMore方法。<br>50是距离页面底部50时触发事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"add"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"page-title"</span>&gt;</span>Infinite Scroll<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"page-infinite-desc"</span>&gt;</span>当即将滚动至列表底部时, 自动加载更多数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"page-infinite-list"</span> <span class="attr">v-infinite-scroll</span>=<span class="string">"loadMore"</span> <span class="attr">infinite-scroll-disabled</span>=<span class="string">"loading"</span> <span class="attr">infinite-scroll-distance</span>=<span class="string">"50"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">class</span>=<span class="string">"page-infinite-listitem"</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span> <span class="comment">&lt;!--每页末尾显示--&gt;</span></span><br><span class="line">    加载中...</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>由于默认刷新时触发方法，所以就不用在周期函数mounted发送异步请求（即不按照官方demo），下面是路由的异步请求，因为是异步，所以要注意：</li><li>javascript异步实际上是事件队列机制，还是单线程。只有线程空闲时，并且到了指定时间才会执行setTimeout事件。在这空闲时间，如果继续往下拉，继续触发loadMore,这时就会重复执行上次的请求。page=3重复或者page=4重复等等<br>所以需要在进入setTimeout前，要this.loading=true,这样就不会触发loadMore事件，不管用setTimeout还是直接this.$http.jsonp(api).then,都是异步，执行这些js之前限制loading=true,这样在异步事件执行之前都不会触发loadMore,在执行完异步方法后，重新将loading=false，这样下次滚动到地步仍可继续触发loadMore事件，获取数据。<br><img src="/2019/05/19/vue的ui框架/vue-ui/scroll1.png" alt="请求接口"><h3 id="如果用setTimeout，来约束滚动到底部多长时间请求数据"><a href="#如果用setTimeout，来约束滚动到底部多长时间请求数据" class="headerlink" title="如果用setTimeout，来约束滚动到底部多长时间请求数据"></a>如果用setTimeout，来约束滚动到底部多长时间请求数据</h3></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line"></span><br><span class="line">requestData()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> api=<span class="string">"http://www.phonegap100.com/appapi.php?a=getPortalList&amp;catid=20&amp;page="</span>+<span class="keyword">this</span>.page</span><br><span class="line">   <span class="keyword">this</span>.$http.jsonp(api).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.list=response.body.result</span><br><span class="line">    ++<span class="keyword">this</span>.page;</span><br><span class="line">    <span class="keyword">this</span>.loading=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.list.length&lt;<span class="number">20</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.loading=<span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="keyword">this</span>.loading=<span class="literal">false</span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">loadMore()&#123;</span><br><span class="line"><span class="keyword">this</span>.loading=<span class="literal">true</span>;<span class="comment">//必须要，不然会异步重复发送请求</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.requestData();</span><br><span class="line"></span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如果直接this-http-jsonp-api-then异步请求"><a href="#如果直接this-http-jsonp-api-then异步请求" class="headerlink" title="如果直接this.$http.jsonp(api).then异步请求"></a>如果直接this.$http.jsonp(api).then异步请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line"></span><br><span class="line">requestData()&#123;</span><br><span class="line"><span class="keyword">this</span>.loading=<span class="literal">true</span>; <span class="comment">//这里必须要，上面已经解释了</span></span><br><span class="line"><span class="comment">//api接口catid=20表示每页20条记录，page是当前第几页，page应该是动态的，所以定义了全局变量page拼接</span></span><br><span class="line">  <span class="keyword">var</span> api=<span class="string">"http://www.phonegap100.com/appapi.php?a=getPortalList&amp;catid=20&amp;page="</span>+<span class="keyword">this</span>.page</span><br><span class="line">   <span class="keyword">this</span>.$http.jsonp(api).then,都是异步，执行这些js之前限制loading=<span class="literal">true</span>,这样在异步事件执行之前都不会触发loadMore,在执行完异步方法后，重新将loading=<span class="literal">false</span>，这样下次滚动到地步仍可继续触发loadMore事件，获取数据。(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.list=<span class="keyword">this</span>.list.concat(response.body.result);</span><br><span class="line">    ++<span class="keyword">this</span>.page;</span><br><span class="line">    <span class="keyword">this</span>.loading=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(response.body.result.length&lt;<span class="number">20</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.loading=<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">window</span>.document.getElementById(<span class="string">"message"</span>).style.display=<span class="string">"none"</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="keyword">this</span>.loading=<span class="literal">false</span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">loadMore()&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.requestData();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>当页面分页到最后一页，应该不能继续触发loadMore事件，所以要判断,上面的代码中<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//response.body.result是当前接口请求数据，上面的api接口</span></span><br><span class="line"><span class="comment">//window.document.getElementById("message").style.display="none"是最后一页时要将loading...这几个文字隐藏，隐藏上面的p段落。，</span></span><br><span class="line"><span class="comment">//如果没有到最后一页，那么loading=false，滚动到底部继续可触发loadMore事件发送异步请求获取数据</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span>(response.body.result.length&lt;<span class="number">20</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.loading=<span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">window</span>.document.getElementById(<span class="string">"message"</span>).style.display=<span class="string">"none"</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;<span class="keyword">this</span>.loading=<span class="literal">false</span>;&#125;</span><br></pre></td></tr></table></figure></li></ol><p>附：查看接口请求数据<br>F12点击network url 右键，选择  open in new tab或者open in source panel就在source面板打开，都可以一样的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue的ui框架&quot;&gt;&lt;a href=&quot;#vue的ui框架&quot; class=&quot;headerlink&quot; title=&quot;vue的ui框架&quot;&gt;&lt;/a&gt;vue的ui框架&lt;/h1&gt;&lt;p&gt;Element Ui 基于vue 的pc端UI框架 &lt;a href=&quot;http://elem
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue路由的嵌套</title>
    <link href="http://yoursite.com/2019/05/18/vue%E8%B7%AF%E7%94%B1%E7%9A%84%E5%B5%8C%E5%A5%97/"/>
    <id>http://yoursite.com/2019/05/18/vue路由的嵌套/</id>
    <published>2019-05-18T10:28:59.000Z</published>
    <updated>2019-05-18T12:49:08.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路由的嵌套"><a href="#路由的嵌套" class="headerlink" title="路由的嵌套"></a>路由的嵌套</h1><p>大白话：点击某部分，只有其中部分内容改变，其余部分不变。<br>菜单栏，导航栏啊等等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import Home from &apos;./components/Home.vue&apos;;</span><br><span class="line"></span><br><span class="line">    import News from &apos;./components/News.vue&apos;;</span><br><span class="line">    import Content from &apos;./components/content.vue&apos;;</span><br><span class="line">    import User from &apos;./components/user.vue&apos;</span><br><span class="line"></span><br><span class="line">    import UserAdd from &apos;./components/user/useradd.vue&apos;;</span><br><span class="line">    import Userlist from &apos;./components/user/userlist.vue&apos;;</span><br><span class="line">    const routes = [</span><br><span class="line">      &#123; path: &apos;/home&apos;, component: Home &#125;,</span><br><span class="line">      &#123; path: &apos;/news&apos;, component: News &#125;,</span><br><span class="line">      &#123; path: &apos;/content/:aid&apos;, component: Content &#125;,</span><br><span class="line">      &#123; path: &apos;/user&apos;, component: User,</span><br><span class="line">        children:[</span><br><span class="line">          &#123;path:&apos;useradd&apos;,component:UserAdd&#125;,</span><br><span class="line">          &#123;path:&apos;userlist&apos;,component:Userlist&#125;</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">     &#125;,</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;路由的嵌套&quot;&gt;&lt;a href=&quot;#路由的嵌套&quot; class=&quot;headerlink&quot; title=&quot;路由的嵌套&quot;&gt;&lt;/a&gt;路由的嵌套&lt;/h1&gt;&lt;p&gt;大白话：点击某部分，只有其中部分内容改变，其余部分不变。&lt;br&gt;菜单栏，导航栏啊等等&lt;br&gt;&lt;figure clas
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue路由编程式导航</title>
    <link href="http://yoursite.com/2019/05/16/vue%E8%B7%AF%E7%94%B1%E7%BC%96%E7%A8%8B%E5%BC%8F%E5%AF%BC%E8%88%AA/"/>
    <id>http://yoursite.com/2019/05/16/vue路由编程式导航/</id>
    <published>2019-05-16T12:23:14.000Z</published>
    <updated>2019-05-18T02:31:24.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue路由编程式导航就是通过js来跳转到页面"><a href="#vue路由编程式导航就是通过js来跳转到页面" class="headerlink" title="vue路由编程式导航就是通过js来跳转到页面"></a>vue路由编程式导航就是通过js来跳转到页面</h1><p>在methods中定义一个方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getContent()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">'/content'</span>&#125;)</span><br><span class="line">  &#125;<span class="comment">// 这就是js代码执行跳转</span></span><br></pre></td></tr></table></figure>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--给个按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"requestData()"</span>&gt;</span>请求数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td>router-link :to=”…” replace&gt;</td><td>router.replace(…)</td></tr></tbody></table><p> 除了使用 <router-link> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现即上面那个。</router-link></p><h1 id="vue路径的hash模式和history模式"><a href="#vue路径的hash模式和history模式" class="headerlink" title="vue路径的hash模式和history模式"></a>vue路径的hash模式和history模式</h1><p> 在main.js中，创建vue路由实例时<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">   mode: <span class="string">'history'</span>,   <span class="comment">/*hash模式改为history ，默认 hash 模式 */</span></span><br><span class="line">  routes <span class="comment">// （缩写）相当于 routes: routes</span></span><br><span class="line"></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></p><p> hash模式路径：<a href="http://localhost:8080/#/content/499" target="_blank" rel="noopener">http://localhost:8080/#/content/499</a> 带个#<br> history模式路径：<a href="http://localhost:8080/content/499" target="_blank" rel="noopener">http://localhost:8080/content/499</a> 需要后台配置支持</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue路由编程式导航就是通过js来跳转到页面&quot;&gt;&lt;a href=&quot;#vue路由编程式导航就是通过js来跳转到页面&quot; class=&quot;headerlink&quot; title=&quot;vue路由编程式导航就是通过js来跳转到页面&quot;&gt;&lt;/a&gt;vue路由编程式导航就是通过js来跳转到
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue动态路由请求数据</title>
    <link href="http://yoursite.com/2019/05/14/vue%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2019/05/14/vue动态路由请求数据/</id>
    <published>2019-05-14T12:32:17.000Z</published>
    <updated>2019-05-16T00:18:44.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue动态路由请求数据"><a href="#vue动态路由请求数据" class="headerlink" title="vue动态路由请求数据"></a>vue动态路由请求数据</h1><ol><li>安装请求数据模块,cnpm install vue-resource –save</li><li>在main.js中引入vue-resource插件</li><li>在需要的组件的里请求数据，method里定义方法<br>在news.vue中发送请求jsonp请求，<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">  requestData()&#123;</span><br><span class="line">  var api=&quot;http://www.phonegap100.com/appapi.php?a=getPortalList&amp;catid=20&amp;page=1&quot;;</span><br><span class="line">    this.$http.jsonp(api).then(function(response)&#123;</span><br><span class="line">      console.log(response);</span><br><span class="line">      console.log(this);</span><br><span class="line">      this.list=response.body.result</span><br><span class="line">    &#125;,</span><br><span class="line">    function(err)&#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mounted()&#123;</span><br><span class="line">  this.requestData();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">在mounted中页面刷新时就执行，然后配置路由link</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;(item,key) in list&quot;&gt;</span><br><span class="line">    &lt;router-link :to=&quot;&apos;/content?aid=&apos;+item.aid&quot;&gt;&#123;&#123;item.aid&#125;&#125;--&#123;&#123;item.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">在content组件中，也在页面刷新时发送个请求，是获取上面路由的动态参数，来执行下面的请求接口的请求携带参数，这就是动态路由</span><br><span class="line">mounted()&#123;</span><br><span class="line"></span><br><span class="line">            //console.log();  获取动态路由传值</span><br><span class="line">            var aid=this.$route.query.aid;</span><br><span class="line">            console.log(&quot;affffffffffffffffffff&quot;,aid)</span><br><span class="line">            this.requestData(aid);</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">        requestData(aid)&#123;</span><br><span class="line"></span><br><span class="line">        var api=&quot;http://www.phonegap100.com/appapi.php?a=getPortalArticle&amp;aid=&quot;+aid</span><br><span class="line">        this.$http.get(api).then(function(response)&#123;</span><br><span class="line">        this.list=response.body.result[&quot;0&quot;]</span><br><span class="line">        console.log(&quot;response----------&quot;,response)</span><br><span class="line">        &#125;,function(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue动态路由请求数据&quot;&gt;&lt;a href=&quot;#vue动态路由请求数据&quot; class=&quot;headerlink&quot; title=&quot;vue动态路由请求数据&quot;&gt;&lt;/a&gt;vue动态路由请求数据&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;安装请求数据模块,cnpm install vue-re
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue动态路由</title>
    <link href="http://yoursite.com/2019/05/12/vue%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2019/05/12/vue动态路由/</id>
    <published>2019-05-12T14:13:17.000Z</published>
    <updated>2019-05-16T23:07:42.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-动态路由"><a href="#vue-动态路由" class="headerlink" title="vue 动态路由"></a>vue 动态路由</h1><h2 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h2><p>每配置router-link跳转，就在main.js中配置一次路由<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&apos;/content/&apos;+key&quot;&gt;&#123;&#123;key&#125;&#125;--&#123;&#123;item&#125;&#125;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">import content from &apos;./components/content.vue&apos;;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; path: &apos;/content/:id&apos;, component: content &#125;</span><br><span class="line">这就是动态路由，参数不同都能传到同一个路由即/content中，可以获取不同的参数，</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;//模板渲染完成之后触发的事件，f5刷新触发的事件</span><br><span class="line"></span><br><span class="line">          /* console.log(this.$route.params);  获取动态路由传值*/</span><br><span class="line"></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">绑定数据用：绑定,下面就是将key绑定到router-link上</span><br><span class="line">&lt;router-link :to=&quot;&apos;/content/&apos;+key&quot;&gt;&#123;&#123;key&#125;&#125;--&#123;&#123;item&#125;&#125;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>总结：动态路由：第一步：配置动态路由 { path: ‘/content/:id’, component: content }</p><p>第二步：在对应的页面获取动态路由的传值<br>this.$route.params</p><h2 id="get传值"><a href="#get传值" class="headerlink" title="get传值"></a>get传值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">get传值就是get请求携带参数</span><br><span class="line">&lt;router-link :to=&quot;&apos;/content?id=&apos;+key&quot;&gt;&#123;&#123;key&#125;&#125;--&#123;&#123;item&#125;&#125;&lt;/router-link&gt;</span><br><span class="line">绑定路由的时候</span><br><span class="line">  &#123; path: &apos;/content&apos;, component: Content &#125;就不需要加：id了，</span><br><span class="line">  其实上面的传值是rest风格传值，一般用在android中</span><br><span class="line">this.$route.query获取携带的参数</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-动态路由&quot;&gt;&lt;a href=&quot;#vue-动态路由&quot; class=&quot;headerlink&quot; title=&quot;vue 动态路由&quot;&gt;&lt;/a&gt;vue 动态路由&lt;/h1&gt;&lt;h2 id=&quot;传值&quot;&gt;&lt;a href=&quot;#传值&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue路由</title>
    <link href="http://yoursite.com/2019/05/12/vue%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2019/05/12/vue路由/</id>
    <published>2019-05-12T09:38:32.000Z</published>
    <updated>2019-05-12T04:11:05.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue路由"><a href="#vue路由" class="headerlink" title="vue路由"></a>vue路由</h1><p>官网：<a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">vue路由</a></p><p>Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。</p><p>就是在父组件上可以自由切换子组件<br>配置路由步骤：</p><pre><code>1、创建组件 引入组件2、定义路由  （建议复制s）    const routes = [      { path: &apos;/foo&apos;, component: Foo },      { path: &apos;/bar&apos;, component: Bar },      { path: &apos;*&apos;, redirect: &apos;/home&apos; }   /*默认跳转路由*/    ]3、实例化VueRouter    const router = new VueRouter({      routes // （缩写）相当于 routes: routes    })4、挂载new Vue({  el: &apos;#app&apos;,  router，  render: h =&gt; h(App)})5 、根组件的模板里面放上这句话   &lt;router-view&gt;&lt;/router-view&gt;         6、路由跳转&lt;router-link to=&quot;/foo&quot;&gt;Go to Foo&lt;/router-link&gt; &lt;router-link to=&quot;/bar&quot;&gt;Go to Bar&lt;/router-link&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue路由&quot;&gt;&lt;a href=&quot;#vue路由&quot; class=&quot;headerlink&quot; title=&quot;vue路由&quot;&gt;&lt;/a&gt;vue路由&lt;/h1&gt;&lt;p&gt;官网：&lt;a href=&quot;https://router.vuejs.org/zh/&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue非父子组件传值</title>
    <link href="http://yoursite.com/2019/05/12/vue%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
    <id>http://yoursite.com/2019/05/12/vue非父子组件传值/</id>
    <published>2019-05-11T17:34:11.000Z</published>
    <updated>2019-05-12T01:50:02.947Z</updated>
    
    <content type="html"><![CDATA[<h1 id="非父子组件传值"><a href="#非父子组件传值" class="headerlink" title="非父子组件传值"></a>非父子组件传值</h1><p>  1、新建一个js文件   然后引入vue  实例化vue  最后暴露这个实例</p><p>  2、在要广播的地方引入刚才定义的实例</p><p>  3、通过 VueEmit.$emit(‘名称’,’数据’)<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;emitnews()&quot;&gt;news组件广播数据&lt;/button&gt;</span><br><span class="line"> methods:&#123;</span><br><span class="line">   emitnews()&#123;</span><br><span class="line">   vueEvent.$emit(&apos;from-news&apos;,this.name);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  4、在接收收数据的地方通过 $om接收广播的数据<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> mounted()&#123;   <span class="comment">//页面一刷新，就监听</span></span><br><span class="line">VueEmit.$on(<span class="string">'名称'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;非父子组件传值&quot;&gt;&lt;a href=&quot;#非父子组件传值&quot; class=&quot;headerlink&quot; title=&quot;非父子组件传值&quot;&gt;&lt;/a&gt;非父子组件传值&lt;/h1&gt;&lt;p&gt;  1、新建一个js文件   然后引入vue  实例化vue  最后暴露这个实例&lt;/p&gt;
&lt;p&gt;  
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue-1</title>
    <link href="http://yoursite.com/2019/05/11/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2019/05/11/vue父子组件通信/</id>
    <published>2019-05-11T10:55:33.000Z</published>
    <updated>2019-05-11T09:28:46.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="父子组件交互"><a href="#父子组件交互" class="headerlink" title="父子组件交互"></a>父子组件交互</h1><h2 id="父组件给子组件传值"><a href="#父组件给子组件传值" class="headerlink" title="父组件给子组件传值"></a>父组件给子组件传值</h2><ol><li><p>在父组件中调用子组件中时，绑定动态属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-header</span> <span class="attr">:title</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">v-header</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在子组件中接受传过来的数据有两种表示方式：</p></li></ol><ul><li>通过props直接接收 传过来的属性，如：props:[‘title’]</li><li>接收是可以验证父组件传过来的属性，不符报错，如： props:{‘title’:String }</li></ul><h2 id="父组件主动获取子组件传值"><a href="#父组件主动获取子组件传值" class="headerlink" title="父组件主动获取子组件传值"></a>父组件主动获取子组件传值</h2><ol><li>在父组件中调用子组件中时，定义一个ref<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-header</span> <span class="attr">ref</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">v-header</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>在父组件中通过this.$refs.header.子组件属性/方法</li></ol><p>看看vue的官方api说明：</p><blockquote><p>ref 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例：</p></blockquote><h2 id="子组件主动获取父组件值"><a href="#子组件主动获取父组件值" class="headerlink" title="子组件主动获取父组件值"></a>子组件主动获取父组件值</h2><ul><li>这种是来替代第一种父组件给子组件传值的，通过$parent直接获取父组件的属性和方法。this.$parent.父组件属性/方法<br>看看vue的官方api说明：<blockquote><p>$parent 属性可以用来从一个子组件访问父组件的实例。它提供了一种机会，可以在后期随时触达父级组件，以替代将数据以 prop 的方式传入子组件的方式。</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;父子组件交互&quot;&gt;&lt;a href=&quot;#父子组件交互&quot; class=&quot;headerlink&quot; title=&quot;父子组件交互&quot;&gt;&lt;/a&gt;父子组件交互&lt;/h1&gt;&lt;h2 id=&quot;父组件给子组件传值&quot;&gt;&lt;a href=&quot;#父组件给子组件传值&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>angularjs</title>
    <link href="http://yoursite.com/2019/05/10/angularjs/"/>
    <id>http://yoursite.com/2019/05/10/angularjs/</id>
    <published>2019-05-09T20:55:53.000Z</published>
    <updated>2019-05-10T11:18:56.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="angularjs学习："><a href="#angularjs学习：" class="headerlink" title="angularjs学习："></a>angularjs学习：</h1><ul><li>减轻程序员的负担、避免重复劳动</li><li>扩展了Html的功能：颠覆性、可扩展</li></ul><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol><li>angular是mvc架构。  <ul><li>m 模型—数据</li><li>v 视图—-表现层</li><li>c 控制—业务逻辑</li></ul></li></ol><p>和其他库共存，ng-app=””表示一个范围，归angular。</p><h3 id="双向绑定："><a href="#双向绑定：" class="headerlink" title="双向绑定："></a><strong>双向绑定</strong>：</h3><p>l</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;angularjs学习：&quot;&gt;&lt;a href=&quot;#angularjs学习：&quot; class=&quot;headerlink&quot; title=&quot;angularjs学习：&quot;&gt;&lt;/a&gt;angularjs学习：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;减轻程序员的负担、避免重复劳动&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js—prototype</title>
    <link href="http://yoursite.com/2019/05/10/js%E2%80%94prototype/"/>
    <id>http://yoursite.com/2019/05/10/js—prototype/</id>
    <published>2019-05-09T18:53:42.000Z</published>
    <updated>2019-05-09T10:56:54.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js原型"><a href="#js原型" class="headerlink" title="js原型"></a>js原型</h1><p>对我以前的研究js原型做一个总结：<br>在刚刚接触JS原型链的时候都会接触到一个熟悉的名词：prototype；如果你曾经深入过prototype，你会接触到另一个名词：<strong>proto</strong>（注意：两边各有两条下划线，不是一条）。以下将会围绕prototype和<strong>proto</strong>这两个名词解释为什么不能在原型链上使用对象以及JS原型链的深层原理。</p><p>　　一、为什么不能在原型链上使用对象：</p><p>　　先举一个非常简单的例子，我有一个类叫Humans（人类），然后我有一个对象叫Tom（一个人）和另一个对象叫Merry(另一个人)，很明显Tom和Merry都是由Humans这一个类实例化之后得到的，然后可以把这个例子写成如下代码：</p><p>复制代码<br>function Humans() {<br>    this.foot = 2;<br>}<br>Humans.prototype.ability = true;</p><p>var Tom = new Humans();<br>var Merry = new Humans();</p><p>alert(Tom.foot);//结果：2<br>alert(Tom.ability);//结果：true<br>alert(Merry.foot);//结果：2<br>alert(Merry.ability);//结果：true<br>复制代码<br>　　以上是一个非常简单的面向对象的例子，相信都能看懂，如果尝试修改Tom的属性ability，则</p><p>复制代码<br>function Humans() {<br>    this.foot = 2;<br>}<br>Humans.prototype.ability = true;</p><p>var Tom = new Humans();<br>var Merry = new Humans();</p><p>Tom.ability = false;<br>alert(Tom.foot);//结果：2<br>alert(Tom.ability);//结果：false<br>alert(Merry.foot);//结果：2<br>alert(Merry.ability);//结果：true<br>复制代码<br>　　以上可以看出Tom的ability属性的值改变了，但并不影响Merry的ability属性的值，这正是我们想要的结果，也是面向对象的好处，由同一个类实例化得到的各个对象之间是互不干扰的；OK，接下来给ability换成object对象又如何?代码如下：</p><p>复制代码<br>function Humans() {<br>    this.foot = 2;<br>}<br>Humans.prototype.ability = {<br>    run : ‘100米/10秒’,<br>    jump : ‘3米’<br>};</p><p>var Tom = new Humans();<br>var Merry = new Humans();</p><p>Tom.ability = {<br>    run : ‘50米/10秒’,<br>    jump : ‘2米’<br>};<br>alert(Tom.ability.run); //结果：’50米/10秒’<br>alert(Tom.ability.jump); //结果：’2米’<br>alert(Merry.ability.run); //结果：’100米/10秒’<br>alert(Merry.ability.jump); //结果：’3米’<br>复制代码<br> 　　以上代码就是在原型链上使用了对象，但从以上代码可以看出Tom的ability属性的改变依然丝毫不会影响Merry的ability的属性，于是乎你会觉得这样的做法并无不妥，为什么说不能在原型链上使用对象?接下来的代码就会显得很不一样，并且可以完全表达出原型链上使用对象的危险性：</p><p>复制代码<br>function Humans() {<br>    this.foot = 2;<br>}<br>Humans.prototype.ability = {<br>    run : ‘100米/10秒’,<br>    jump : ‘3米’<br>};</p><p>var Tom = new Humans();<br>var Merry = new Humans();</p><p>Tom.ability.run = ‘50米/10秒’;<br>Tom.ability.jump = ‘2米’;</p><p>alert(Tom.ability.run); //结果：’50米/10秒’<br>alert(Tom.ability.jump); //结果：’2米’<br>alert(Merry.ability.run); //结果：’50米/10秒’<br>alert(Merry.ability.jump); //结果：’2米’<br>复制代码<br>　　没错，从以上代码的输出结果可以看出Tom的ability属性的改变影响到Merry的ability属性了，于是就可以明白在原型链上使用对象是非常危险的，很容易会打破实例化对象之间的相互独立性，这就是为什么不能在原型链上使用对象的原因?是的，但我想说的可不只如此，而是其中的原理，看完后面JS原型链的深层原理之后，相信你会完全明白。</p><p>　　在以下第二部份解释JS原型链的深层原理之前，先来明确一个概念：原型链上的属性或方法都是被实例化对象共用的，正因如此，上面的Tom.ability.run=’50米/10秒’，改动了原型连上的ability才导致另一个对象Merry受影响，既然如此，你可能会问Tom.ability = {……}不也是改动了原型链上的ability吗，为什么Merry没有受影响?答案是Tom.ability = {……}并没有改动原型链上的ability属性，而是为Tom添加了一个自有属性ability，以后访问Tom.ability的时候不再需要访问原型链上的ability，而是访问其自有属性ability，这是就近原则；OK，如果你仍有疑问，可以用纸笔记下你的疑问，继续往下看你会更加明白。</p><p>　　二、JS原型链的深层原理：</p><p>　　首先要引入一个名词<strong>proto</strong>，<strong>proto</strong>是什么?在我的理解里，<strong>proto</strong>才是真正的原型链，prototype只是一个壳。如果你使用的是chrome浏览器，那么你可以尝试使用alert(Tom.<strong>proto</strong>.ability.run)，你发现这样的写法完全可行，而且事实上当只有原型链上存在ability属性的时候，Tom.ability其实是指向Tom.<strong>proto</strong>.ability的；当然，如果你跑到IE浏览器里尝试必然会报错，事实上IE浏览器禁止了对<strong>proto</strong>的访问，而chrome则是允许的，当然实际开发中，我并不建议直接就使用<strong>proto</strong>这一属性，但它往往在我们调试代码时发挥着重要作用。有人可能会问到底Tom.<strong>proto</strong>和Humans.prototype是什么关系，为了理清两者的关系，下面先列出三条法则：</p><p>　　1、对象是拥有<strong>proto</strong>属性的，但没有prototype；例如：有Tom.<strong>proto</strong>，但没有Tom.prototype。</p><p>　　2、类没有<strong>proto</strong>属性，但有prototype；例如：没有Humans.<strong>proto</strong>，但有Humans.prototype（这里必须纠正一下，同时非常感谢‘川川哥哥’提出这一处错处，确实是我在写到这一点的时候没有考虑清楚，事实上Humans也是Function的一个实例对象，因此Humans.<strong>proto</strong>===Function.prototype是绝对成立的，稍有特殊的是这时Function.prototype是指向一个Empty（空）函数，值得推敲）。</p><p>　　3、由同一个类实例化（new）得到的对象的<strong>proto</strong>是引用该类的prototype的（也就是我们说的引用传递）；例如Tom和Merry的<strong>proto</strong>都引用自Humans的prototype。</p><p> 　　OK，上面说过Tom.ability={……}其实并没有改变原型链上的ability属性，或者说并没有改变Tom.<strong>proto</strong>.ability，而是为Tom添加了一个自有的ability属性，为了说明这一点，我们再次回到以上的第三个代码块，其代码如下：</p><p>复制代码<br>function Humans() {<br>    this.foot = 2;<br>}<br>Humans.prototype.ability = {<br>    run : ‘100米/10秒’,<br>    jump : ‘3米’<br>};</p><p>var Tom = new Humans();<br>var Merry = new Humans();</p><p>Tom.ability = {<br>    run : ‘50米/10秒’,<br>    jump : ‘2米’<br>};<br>alert(Tom.ability.run); //结果：’50米/10秒’<br>alert(Tom.ability.jump); //结果：’2米’<br>alert(Merry.ability.run); //结果：’100米/10秒’<br>alert(Merry.ability.jump); //结果：’3米’<br>复制代码<br>　　当为Tom.ability赋予新的值后，再次访问Tom.ability时就不再指向Tom.<strong>proto</strong>.ability了，因为这时其实是为Tom添加了自有属性ability，可以就近取值了，你可以尝试用Chrome浏览器分别alert(Tom.ability.run)和alert(Tom.<strong>proto</strong>.ability.run)，你会发现确实存在两个不同的值，再看完下面的图后，相信你会完全明白：</p><p>　　于是可以有这样一个结论：当访问一个对象的属性或方法的时候，如果对象本身有这样一个属性或方法就会取其自身的属性或方法，否则会尝试到原型链（<strong>proto</strong>）上寻找同名的属性或方法。明白了这一点后，要解释以上第四个代码块的原理也非常容易了，其代码如下：</p><p>复制代码<br>function Humans() {<br>    this.foot = 2;<br>}<br>Humans.prototype.ability = {<br>    run : ‘100米/10秒’,<br>    jump : ‘3米’<br>};</p><p>var Tom = new Humans();<br>var Merry = new Humans();</p><p>Tom.ability.run = ‘50米/10秒’;<br>Tom.ability.jump = ‘2米’;</p><p>alert(Tom.ability.run); //结果：’50米/10秒’<br>alert(Tom.ability.jump); //结果：’2米’<br>alert(Merry.ability.run); //结果：’50米/10秒’<br>alert(Merry.ability.jump); //结果：’2米’<br>复制代码<br>　　当Tom.ability.run=’50米/10秒’的时候，JS引擎会认为Tom.ability是存在的，因为有Tom.ability才会有Tom.ability.run，所以引擎开始寻找ability属性，首先是会从Tom的自有属性里寻找，在自有属性里并没有找到，于是到原型链里找，结果找到了，于是Tom.ability就指向了Tom.<strong>proto</strong>.ability了，修改Tom.ability.run的时候实际上就是修改了原型链上的ability了，因而影响到了所有由Humans实例化得到的对象，如下图：</p><p>　　希望上面所讲的内容足够清楚明白，下面通过类的继承对原型链作更进一步的深入：</p><p>　　先来看一个类的继承的例子，代码如下：</p><p>复制代码<br>function Person() {<br>    this.hand = 2;<br>    this.foot = 2;<br>}<br>Person.prototype.say = function () {<br>    alert(‘hello’);<br>}<br>function Man() {<br>    Person.apply(this, arguments);//对象冒充<br>    this.head = 1;<br>}<br>Man.prototype = new Person();//原型链<br>Man.prototype.run = function () {<br>    alert(‘I am running’);<br>};<br>Man.prototype.say = function () {<br>    alert(‘good byte’);<br>}<br>var man1 = new Man();<br>复制代码<br> 　　以上代码是使用对象冒充和原型链相结合的混合方法实现类的继承，也是目前JS主流的实现类的继承的方法，如果对这种继承方法缺乏了解，可以看看这里。</p><p>　　接下来看看以上实现继承后的原型链，可以运用prototype和<strong>proto</strong>来解释其中的原理：</p><p>　　1、从man1 = new Man()，可以知道man1的<strong>proto</strong>是指向Man.prototype的，于是有:</p><p>　　公式一：man1.<strong>proto</strong> === Man.prototype 为true</p><p>　　2、从上面的代码原型链继承里面看到这一句代码 Man.prototype = new Person()，作一个转换，变成：Man.prototype = a，a = new Perosn()；一个等式变成了两个等式，于是由a = new Perosn()可以推导出a.<strong>proto</strong> = Person.prototype，结合Man.prototype = a，于是可以得到：</p><p>　　公式二：Man.prototype.<strong>proto</strong> === Person.prototype 为true</p><p>　　由公式一和公式二我们就得出了以下结论：</p><p>　　公式三：man1.<strong>proto</strong>.<strong>proto</strong> === Person.prototype 为true</p><p>　　公式三就是上述代码的原型链，有兴趣的话，可以尝试去推导多重继承的原型链，继承得越多，你会得到一个越长的原型链，而这就是原型链的深层原理；从公式三可以得出一个结论：当你访问一个对象的属性或方法时，会首先在自有属性寻找（man1），如果没有则到原型链找，如果在链上的第一环（第一个<strong>proto</strong>）没找到，则到下一环找（下一个<strong>proto</strong>），直到找到为止，如果到了原型链的尽头仍没找到则返回undefined（这里必须补充一点：同时非常感谢深蓝色梦想提出的疑问：尽头不是到了Object吗?是的，原型链的尽头就是Object，如果想问为什么，不妨做一个小小的实验：如果指定Object.prototype.saySorry = ‘I am sorry’，那么你会惊喜地发现alert(man1.saySorry)是会弹出结果‘I am sorry’的）。</p><p>　　以上就是原型链的深层原理，说难其实也算容易，如果细心研究，会发现原型链上有很多惊喜。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js原型&quot;&gt;&lt;a href=&quot;#js原型&quot; class=&quot;headerlink&quot; title=&quot;js原型&quot;&gt;&lt;/a&gt;js原型&lt;/h1&gt;&lt;p&gt;对我以前的研究js原型做一个总结：&lt;br&gt;在刚刚接触JS原型链的时候都会接触到一个熟悉的名词：prototype；如果你曾经
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="http://yoursite.com/2019/05/09/vue%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E5%AD%90%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/05/09/vue父组件传值子组件/</id>
    <published>2019-05-08T20:28:31.000Z</published>
    <updated>2019-05-11T09:29:17.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue的父子传值（包括父组件，值，方法）"><a href="#vue的父子传值（包括父组件，值，方法）" class="headerlink" title="vue的父子传值（包括父组件，值，方法）"></a>vue的父子传值（包括父组件，值，方法）</h1><p>vue的父组件传递给子组件，两步走：<br>在父组件中：<br>1、导入子组件（这是成为父子组件前提）<br>2、components中申明组件<br>3、view中引用<br>4、引用中引入传递的变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 所有的内容要被根节点包含起来 --&gt;</span><br><span class="line">    &lt;div id=&quot;home&quot;&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;v-header :title=&quot;title&quot; :homemsg=&apos;msg&apos;  :run=&quot;run&quot;  :home=&quot;this&quot;&gt;&lt;/v-header&gt;</span><br><span class="line"></span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">         首页组件   </span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">父组件给子组件传值</span><br><span class="line"></span><br><span class="line">    1.父组件调用子组件的时候 绑定动态属性</span><br><span class="line">        &lt;v-header :title=&quot;title&quot;&gt;&lt;/v-header&gt;</span><br><span class="line"></span><br><span class="line">    2、在子组件里面通过 props接收父组件传过来的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">    import Header from &apos;./Header.vue&apos;;</span><br><span class="line"></span><br><span class="line">    export default&#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;               </span><br><span class="line">               msg:&apos;我是一个home组件&apos;,</span><br><span class="line">               title:&apos;首页111&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line"></span><br><span class="line">            &apos;v-header&apos;:Header</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"></span><br><span class="line">            run(data)&#123;</span><br><span class="line"></span><br><span class="line">                alert(&apos;我是Home组件的run方法&apos;+data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"></span><br><span class="line">    /*css  局部作用域  scoped*/</span><br><span class="line"></span><br><span class="line">    h2&#123;</span><br><span class="line"></span><br><span class="line">        color:red</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>接下来在子组件中使用变量，在props中接收<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;h2&gt;我是头部组件--&#123;&#123;title&#125;&#125;---&#123;&#123;homemsg&#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button @click=&quot;run(&apos;123&apos;)&quot;&gt;执行父组件的方法&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;button @click=&quot;getParent()&quot;&gt;获取父组件的数据和方法&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">export default&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    data()&#123;</span><br><span class="line"></span><br><span class="line">        return&#123;</span><br><span class="line">            msg:&apos;子组件的msg&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getParent()&#123;</span><br><span class="line">            // alert(this.title)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            // alert(this.home.title)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            this.home.run()</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    props:[&apos;title&apos;,&apos;homemsg&apos;,&apos;run&apos;,&apos;home&apos;]</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>还可以对父组件传递过来的值验证，不是这种类型就不接受，控制台报错，在子组件接受传递过来的props中设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">    title:String,</span><br><span class="line">    getParent:Function,</span><br><span class="line">    getHome:Function</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue的父子传值（包括父组件，值，方法）&quot;&gt;&lt;a href=&quot;#vue的父子传值（包括父组件，值，方法）&quot; class=&quot;headerlink&quot; title=&quot;vue的父子传值（包括父组件，值，方法）&quot;&gt;&lt;/a&gt;vue的父子传值（包括父组件，值，方法）&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>github_git</title>
    <link href="http://yoursite.com/2019/05/05/github-git/"/>
    <id>http://yoursite.com/2019/05/05/github-git/</id>
    <published>2019-05-05T12:14:44.000Z</published>
    <updated>2019-05-25T07:52:24.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><hr><p>搭建github就不说了，进入(<strong>仓库主页</strong>)创建仓库，仓库主页在哪?<br>可以在右上角的your repositories，或者在个人主页(your profile)里面有repositories，点一下就是仓库主页。</p><p>在里面创建一个仓库，作为远程仓库。创建完之后，是个空仓库。有个提示，在本地可以用以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git remote add origin https://github.com/pcdegithub/learn.git //这就是本地建立与远程仓库的连接</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p><p>这样就把本地仓库与远程仓库建立了联系，同时，把本地仓库所有内容推送到远程仓库。 </p><p>如果本地有仓库了，那么就不用再git init初始化一个本地仓库，直接将git remote add origin ssh  远程库的名字就是origin，这是Git默认的叫法。也可以改成别的，但是origin这个名字一看就知道是远程库。</p><p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以就可以不用加-u</p><p>如果不想用git clone <a href="https://github.com/pcdegithub/learn.git，而是本地git" target="_blank" rel="noopener">https://github.com/pcdegithub/learn.git，而是本地git</a> init后，想直接从github上获取仓库版本然后修改，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init  </span><br><span class="line">git remote add origin https://github.com/pcdegithub/learn.git //这就是本地建立与远程仓库的连接</span><br><span class="line">git pull/fetch origin master</span><br></pre></td></tr></table></figure><hr><p>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；</p><p>关联后，使用命令git push -u origin master第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；</p><p>上次我们讲了先有本地库，后有远程库的时候，如何关联远程库。</p><p>现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆<br>要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;远程仓库&quot;&gt;&lt;a href=&quot;#远程仓库&quot; class=&quot;headerlink&quot; title=&quot;远程仓库&quot;&gt;&lt;/a&gt;远程仓库&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;搭建github就不说了，进入(&lt;strong&gt;仓库主页&lt;/strong&gt;)创建仓库，仓库主页在哪?&lt;br&gt;可以在
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>learngit</title>
    <link href="http://yoursite.com/2019/05/04/git/"/>
    <id>http://yoursite.com/2019/05/04/git/</id>
    <published>2019-05-04T15:37:00.000Z</published>
    <updated>2019-05-19T10:43:04.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="温习一下git"><a href="#温习一下git" class="headerlink" title="温习一下git"></a>温习一下git</h1><hr><h2 id="一、基本命令"><a href="#一、基本命令" class="headerlink" title="一、基本命令"></a>一、基本命令</h2><ol><li><p>git init<br>&nbsp;&nbsp;初始化仓库，在本地创建一个仓库，.git记载了版本等信息.</p></li><li><p>git add file<br>&nbsp;&nbsp;file就是要add的文件名，都是同样的做法，将文件放到暂存区（缓存区），然后一次性提交 git add file1; git add file2;git commit -m “一次性提交”</p></li><li><p>git commit -m “description”<br>&nbsp;&nbsp;-m一定要写，方便以后回退查看历史</p></li><li><p>git status  </p></li></ol><hr><p>&nbsp;&nbsp;查看仓库的目前状态。如果仓库来了个新人（创建一个文件），实习期，并没有转正，没交入职材料，没签合同，没录入公司员工管理系统。这时处于未跟踪状态。 </p><ul><li><img src="/2019/05/04/git/learngit/untracked.png" alt="未追踪" title="untracked"><br>&nbsp;&nbsp;当git add放到缓存中之后，意味通过实习期，开始跟踪了。此时看git status ,准备提交  </li><li><img src="/2019/05/04/git/learngit/AfterAddtobeCommited.PNG" alt="将提交暂存区" title="to be commited"><br>&nbsp;&nbsp;只要执行一次git add，就是通过实习期,后面 无论什么时候修改文件, git status ,是（not staged for commited）将提交暂存区（起点）</li><li><p><img src="/2019/05/04/git/learngit/preparedCommit.PNG" alt="将提交暂存区" title="not staged to commit">  </p><h3 id="总结：有两条路："><a href="#总结：有两条路：" class="headerlink" title="总结：有两条路："></a>总结：有两条路：</h3><p>未跟踪和将提交缓存区本质是一个意思，未跟踪也是将要提交缓存区，然后变为跟踪</p><ol><li>untracked–&gt;to be commited  </li><li><p>not staged to commit(将提交暂存区) —&gt;to be commited</p></li><li><p>为什么有两个状态,因为git会 add –commit这一路认为add好后就提交,这只会有一个状态，如果中间有修改了，那么会有另一个状态。下面的图状态发生在git add之后，第一个状态就是默认会提交状态，<br>第二个状态是git add之后又修改了内容（缓存内容变了），所以又回到起点，这时只有先git add重新放回缓存里，<br><img src="/2019/05/04/git/learngit/why.PNG" alt="将提交暂存区" title="not staged to commit">   </p></li></ol></li></ul><hr><h2 id="其他重要命令"><a href="#其他重要命令" class="headerlink" title="其他重要命令"></a>其他重要命令</h2><ul><li>git diff查看不同 无论是新文件 git add 之后修改，还是老文件git add 之前 之后 。总之在未commted之前，都可以看到当前修改的内容和上个内容。无论提交还是修改都要git add放到缓存区，然后一次性提交。<strong><em>staged:暂存，not staged to commit:还没有提交暂存</em></strong><br><img src="/2019/05/04/git/learngit/git_diff.PNG" alt="将提交暂存区" title="not staged to commit"></li></ul><hr><ul><li>git reset –HEAD(这里的写法:HEAD^,HEAD^^,HEAD^^^,或者HEAD~100) HEAD^回退到上一个版本，HEAD^^回退到上上个版本……<br>回退之后工作区内容就彻底变了。</li><li>git log查看历史纪录，每个历史纪录在git中叫做commit,相当于快照<br><img src="/2019/05/04/git/learngit/gitlog.PNG" alt="将提交暂存区" title="not staged to commit">图片中的每条记录名称叫commit，后面是commit的id号，用来回退，之需要输入前几个，git自动识别后面的。Head就是当前版本，指针总是指向head,<br>开始回退：  </li><li>git reset –hard HEAD^ 回退到上一个版本。用git log查看历史纪录，回退之前的版本的记录就没有了。HEAD^这种写法只能回退，不能从过去返回到现在。这时需要commit id了。<br>git reset –hard commitid 只需要写前几位。<br>这个commitid因为查看不到历史纪录，只能用另一个命令</li><li><p>git reflog查看命令历史，以便确定要回到未来的哪个版本。<br>git log可以查看提交历史,只能看到当前版本之前的历史纪录，以便确定要回退到哪个版本。</p><p><strong><em>不管处在什么阶段 ，只要git reset 都直接回退到那个版本，工作区处于无状态即git status查看只会看到nothing to commit, working tree clean</em></strong></p></li></ul><p>无论git log ,git reflog查看历史纪录，每个版本动作操作都记录下了，包括回退。从上到下是最近操作到过去操作<br><img src="/2019/05/04/git/learngit/reflog_log.PNG" alt="历史纪录" title="log_flog">  </p><hr><h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p>默认工作区是不包含.git文件夹的，默认的状态，没有修改处于<br>没有对工作区做任何修改，那么工作区就是“干净”<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></p><p>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。<br>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。<br>创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。<br>需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><h2 id="管理的是修改"><a href="#管理的是修改" class="headerlink" title="管理的是修改"></a>管理的是修改</h2><p>什么是修改？比如你新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。  </p><p><font face="微软雅黑" color="red"><strong>分析过程</strong></font> ：第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git commit<br>查看最后的状态：Changes not staged for commit (将要提交到缓存） </p><p><font color="green"><strong><em>why?</em></strong></font>:<br>Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。   </p><h3 id="总结：不管处于什么阶段：add前后或者commit前后，工作区是物理磁盘，暂存区是缓存，不是一回事。工作区修改，暂存区不会变，提交都是经过缓存。所以只要工作区修改，都要add到缓存区。"><a href="#总结：不管处于什么阶段：add前后或者commit前后，工作区是物理磁盘，暂存区是缓存，不是一回事。工作区修改，暂存区不会变，提交都是经过缓存。所以只要工作区修改，都要add到缓存区。" class="headerlink" title="总结：不管处于什么阶段：add前后或者commit前后，工作区是物理磁盘，暂存区是缓存，不是一回事。工作区修改，暂存区不会变，提交都是经过缓存。所以只要工作区修改，都要add到缓存区。"></a>总结：不管处于什么阶段：add前后或者commit前后，工作区是物理磁盘，暂存区是缓存，不是一回事。工作区修改，暂存区不会变，提交都是经过缓存。所以只要工作区修改，都要add到缓存区。</h3><p>##撤销<br>git checkout – 文件 撤销修改，该是什么状态就是什么状态，仅仅撤销工作区的修改，对暂存区没影响。<br>git reset 是回退到历史版本，.git中版本库每次commit都有个版本。不管是暂存区还是什么阶段，都直接回退历史版本，然后状态工作区是历史版本，暂存区为空（干净状态）</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>真正比较的是工作区和版本库中的最新版本，暂存区只是两者的桥梁，仅仅起链接作用。</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>直接手动删除，或者rm 文件，这种物理删除，导致工作区和版本库中的最新版本不一致，可以通过git status看到。</p><ul><li>如果想删除版本库中的，那么git rm 文件 ，然后git commit -m “描述”</li><li>如果想撤销物理删除，git checkout – 文件，工作区文件归位。</li><li>如果版本库中该文件版本删除了，那么git checkout就没有用了<h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3></li></ul><ol><li><p>对于git add之前，工作区是修改还是删除，都可以“一键还原”， git checkout其实是用版本库里的版本替换工作区的版本。</p></li><li><p>对于添加到暂存区之后，工作区是修改还是删除，也是一键还原到暂存区该有的状态。如：如果添加到暂存区后，又修改了工作区，这时候删除，用git checkout撤销会撤销到暂存区并且未修改状态。</p></li><li>总之该是什么状态就是什么状态</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;温习一下git&quot;&gt;&lt;a href=&quot;#温习一下git&quot; class=&quot;headerlink&quot; title=&quot;温习一下git&quot;&gt;&lt;/a&gt;温习一下git&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;一、基本命令&quot;&gt;&lt;a href=&quot;#一、基本命令&quot; class=&quot;headerl
      
    
    </summary>
    
    
  </entry>
  
</feed>
